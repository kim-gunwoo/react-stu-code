// React

// npm 으로 리액트 설치,  -D 개발용 설치
npm i react react-dom
npm i -D webpack webpack-cli

// webpack 실행 방법
package.json > script 부분에 명령어 추가 ex) "dev": "webpack"
terminal 프로젝트 설정 위치에서 npm run dev 

npx webpack

// 바벨 설정 jsx 파일을 읽기 위해선 babel 및 babel 의 jsx 설정을 해줘야함
npm i -D @babel/core @babel/preset-env @babel/preset-react babel-loader 

npm i -D @babel/plugin-proposal-class-properties

// webpack 공식사이트
webpack.js.org 

// 자동 리로드
npm i -D react-hot-loader

npm i -D webpack-dev-server

// require , import
const {} = require({}) , import {} = from {}

module.exports = {} , export default = {}

// class , hooks 랜더링 관련  
PureComponent , memo 값이 바뀌었을때만 랜더링을 진행
shouldComponentUpdate(nextProps, nextState, nextCoutext) {} 특정조건에서 랜더링 하도록 할수있음

// 리액트 라이프 사이클
/*
클래스의 경우 constructor -> render -> ref -> componentDidMount 
-> (setState/props 바뀔때) -> shouldComponentUpdate(return true) -> render -> componentDidUpdate 
부모가 나를 없앨때 -> componentWillUnmount -> 소멸
*/
componentDidMount(){} 최초에 한번 랜더링이 성공했을경우에 한번 실행, 비동기 요청 
componentDidUpdate() {} 컴포넌트가 리랜더링이 발생했을 경우
componentWillUnmount() {} 컴포넌트가 제거 되기 직전, 비동기 요청 정리

/*
Hooks의 경우 
*/
useEffect(() => {
        // componentDidMount, componentDidUpdate 의 역할

        return () => {
            // componentDidMount 의 역할

        };
    }, []); // [] 랜더링 요청하는 값

// class , hooks  라이프 사이클
                        useEffect (val1,    val2,   val3 ...)  // 랜더링시 요청하는 값 하나씩 또는 여러개씩 묶어서 처리
componentDidMount       val1    val2    val3  ...  // 랜더링시 요청하는 모든 값을 한번에 컨트롤
componentDidUpdate
componentDidMount

// class 는 row 단위로 hooks 는 col 단위로 라이프 사이클 처리 


// useRef 일반값 기억

// useMemo 복잡한 함수 결과값 기억
const 결과값을 받을 변수 = useMemo(() => { 받고자 하는 결과값 }, [지우고자 하는 값]);

// useCallback 함수 자체를 기억 함수를 재생성 하지 않도록 함 
// 자식에게 props 값으로 함수를 줄때 사용
const 함수명 = useCallback(() => { 사용하고자 하는 내부 }, [지우고자 하는 값]);

// Hooks 주의사항 
조건문안에 넣으면 안된다 useEffect 안에서 useState 를 쓰면 안된다

// useReducer 기본구조
import React, { useReducer } from "react";

const initialState = {
    //state,
};

const reducer = (state, action) => {
    switch (action.type) {
        default:
            return state;
    }
};

const {익스포트} = () => {
    const [state, dispatch] = useReducer(reducer, initialState);
    return;
};

export default {익스포트};

// Context API 
createContext
Context.Provider

// React Router
npm i react-router
npm i react-router-dom

import { HashRouter , BrowserRouter } from "react-router-dom"
// 해쉬라우터는 새로고침 했을 경우에도 화면이 뜬다, 검색엔진에서는 조회되지 않는다.
// 브라우져라우터는 검색엔진에는 뜨지만 새로고침은 되지 않음


// React | Router : match, location, history
반환된 객체(props) 에서 history, location, match가 존재함

Switch
 Router 가 여러개일 경우 매칭되는 첫번째 라우터만 보여준다.

exact : 속성의 경우 주어진 경로와 정확히 떨어질 경우 컴포넌트를 보여준다.

Match
 match 객체에는 <Route path>와 URL이 매칭된 대한 정보가 담겨져있다. 대표적으로 match.params로 path에 설정한 파라미터값을 가져올 수 있다.
 
· path : [string] 라우터에 정의된 path
· url : [string] 실제 클라이언트로부터 요청된 url path
· isExact : [boolean] true일 경우 전체 경로가 완전히 매칭될 경우에만 요청을 수행
· params : [JSON object] url path로 전달된 파라미터 객체 

Location
 location 객체에는 현재 페이지의 정보를 가지고 있다. 대표적으로 location.search로 현재 url의 쿼리 스트링을 가져올 수 있다.

· pathname : [string] 현재 페이지의 경로명
· search : [string] 현재 페이지의 query string
· hash : [string] 현재 페이지의 hash

History
 history 객체는 브라우저의 history와 유사하다. 스택(stack)에 현재까지 이동한 url 경로들이 담겨있는 형태로 주소를 임의로 변경하거나 되돌아갈 수 있도록 해준다.

· length : [number] 전체 history 스택의 길이
· action : [string] 최근에 수행된 action (PUSH, REPLACE or POP)
· location : [JSON object] 최근 경로 정보
· push(path, [state]) : [function] 새로운 경로를 history 스택으로 푸시하여 페이지를 이동
· replace(path, [state]) : [function] 최근 경로를 history 스택에서 교체하여 페이지를 이동
· go(n) : [function] : history 스택의 포인터를 n번째로 이동
· goBack() : [function] 이전 페이지로 이동
· goForward() : [function] 앞 페이지로 이동
· block(prompt) : [function] history 스택의 PUSH/POP 동작을 제어






